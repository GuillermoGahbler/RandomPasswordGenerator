{"version":3,"sources":["Generator/Generator.js","App.js","serviceWorker.js","index.js"],"names":["Generator","state","values","letterPick","passwordLength","createRandomPassword","anything","newPasswordArray","i","_this","push","Math","floor","random","length","join","handleRandomAlphabet","randomLetter","setState","handleChange","event","usersInput","target","value","parseInt","react_default","a","createElement","onClick","this","handlePasswordLengthClick","type","onChange","Component","App","className","src_Generator_Generator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA0EeA,6MAtEbC,MAAQ,CACNC,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5WC,WAAY,GACZC,eAAgB,KAMlBC,qBAAuB,WAOrB,IANA,IAA0BC,EAItBC,EAAmB,GAEdC,EAAI,EAAGA,EAAIC,EAAKR,MAAMG,eAAgBI,IAC7CD,EAAiBG,MAPOJ,EAOeG,EAAKR,MAAMC,QANlCS,KAAKC,MAAMD,KAAKE,SAAWP,EAASQ,UAQtD,OAAOP,EAAiBQ,KAAK,OAK/BC,qBAAuB,WACrB,IAAMC,EAAeR,EAAKJ,uBAC1BI,EAAKS,SAAS,CACZf,WAAYc,OAIhBE,aAAe,SAACC,GACd,IAAIC,EAAaD,EAAME,OAAOC,MAG1BnB,EAAiBoB,SAASH,GAC9BZ,EAAKS,SAAS,CACZd,eAAeA,6EAOjB,OACEqB,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,QAAMC,QAASC,KAAKC,2BAClBL,EAAAC,EAAAC,cAAA,0EACAF,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SACZR,MAAOM,KAAK5B,MAAMsB,MAClBS,SAAUH,KAAKV,eAEdM,EAAAC,EAAAC,cAAA,sEAGDF,EAAAC,EAAAC,cAAA,iCAEDE,KAAK5B,MAAME,aAIZsB,EAAAC,EAAAC,cAAA,UAAQC,QAASC,KAAKb,sBAAtB,8BAhEgBiB,aCsBTC,0LAbX,OACET,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,oDACQF,EAAAC,EAAAC,cAACS,EAAD,cAPEH,cCKEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.54bba189.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Generator extends Component {\n\n  state = {\n    values: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '!', \"@\", '#', '$', '%', '^', '&', '*', '(', ')'],\n    letterPick: \"\",\n    passwordLength: 0\n     \n  }\n\n\n\n  createRandomPassword = () => {\n    const randomlyGetValue = (anything) => {\n      return anything[Math.floor(Math.random() * anything.length)]\n    }\n\n    let newPasswordArray = [];\n\n    for (let i = 0; i < this.state.passwordLength; i++) {\n      newPasswordArray.push(randomlyGetValue(this.state.values))\n    }\n    return newPasswordArray.join('')\n  }\n\n\n\n  handleRandomAlphabet = () => {\n    const randomLetter = this.createRandomPassword();\n    this.setState({\n      letterPick: randomLetter\n    })\n  }\n\n  handleChange = (event)=>{\n    let usersInput = event.target.value\n    /* let usersInputConvertedToLength = usersInput.length;\n     or in otherwords*/\n    let passwordLength = parseInt(usersInput)\n    this.setState({\n      passwordLength:passwordLength\n    })\n  }\n\n\n  // Render will show all fucntions and state above\n  render() {\n    return (\n      <div>\n        \n        <form onClick={this.handlePasswordLengthClick}>\n          <label> How long do you want your password to be? Enter a number:\n          <input type=\"number\" \n          value={this.state.value} \n          onChange={this.handleChange}\n           />\n           <h5>you can generate or change length as much as you'd like</h5>\n          </label>\n           \n          <p>\n          Here's your password: \n        {this.state.letterPick}</p>\n        </form>\n\n\n        <button onClick={this.handleRandomAlphabet}>click to generate </button>\n        {/* I'm just throwing this state below to better understand it's useless but useful to me :) */}\n        {/* <h4>{this.state.otherState[0].phrase} & <h4>{this.state.otherState[1].otherPhrase}</h4></h4> */}\n      </div>\n    )\n  }\n}\n\nexport default Generator;","import React, { Component } from 'react';\nimport Generator from './Generator/Generator'\n// import BasicComponent from './BasicComponent/BasicComponent'\n// import StateComponent from './StateComponent/StateComponent';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n\n\n    return (\n      <div className=\"App\">\n        <h1>El Rando the random password generator</h1>\n                <Generator/>\n                {/* <BasicComponent/>\n                <StateComponent/> */}\n \n                \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n \nserviceWorker.unregister();\n"],"sourceRoot":""}